#!/usr/sbin/nft -f

# Clear all previous rules
flush ruleset

# Define variables for repeated values
define icmp_ratelimit = 10/second
define tcp_services_ratelimit = 30/minute
define critical_services_ratelimit = 60/minute

# Setup tables and basic infrastructure
table inet filter {
    # Sets for efficient rule management
    set tcp_scan_ports {
        type inet_service
        flags interval
        elements = { 21, 22, 23, 25, 80, 443, 3306, 3389, 5432 }
    }

    set invalid_tcp_flags {
        type inet_service
        flags interval
        elements = { 
            0x01, # FIN only
            0x02, # SYN only
            0x03, # SYN-FIN
            0x05, # FIN-RST
            0x06, # SYN-RST
            0x07, # SYN-FIN-RST
            0x08, # PSH only
            0x09, # FIN-PSH
            0x0B, # FIN-PSH-RST
            0x0C, # SYN-PSH
            0x0E, # SYN-PSH-RST
            0x1F  # ALL flags
        }
    }

    # Connection tracking set for rate limiting
    set ct_states {
        type ct_state
        flags interval
        elements = { established, related, new }
    }

    chain input {
        type filter hook input priority 0; policy drop;

        # Allow loopback
        iifname lo accept

        # Connection tracking - early drop of invalid packets
        ct state invalid drop
        ct state { established, related } accept

        # Anti-scan protection: Drop common port scans
        tcp flags & (fin|syn) == (fin|syn) drop
        tcp flags & (syn|rst) == (syn|rst) drop
        tcp flags & (fin|rst) == (fin|rst) drop
        tcp flags & (fin|ack) == fin drop
        tcp flags & (ack|rst) == rst drop

        # Basic anti-recon: Rate limit ICMP
        ip protocol icmp limit rate $icmp_ratelimit accept
        ip6 nexthdr icmpv6 limit rate $icmp_ratelimit accept

        # Allow specific incoming services with rate limiting
        tcp dport ssh limit rate $critical_services_ratelimit accept
        tcp dport { http, https } limit rate $tcp_services_ratelimit accept

        # Protection against stealth scans
        tcp flags & (fin|syn|rst|ack) != syn ct state new drop

        # Drop packets with suspicious TCP flags
        tcp flags @invalid_tcp_flags drop

        # Log and drop everything else
        limit rate 3/minute log prefix "NFTables-Input-DROP: "
        drop
    }

    chain output {
        type filter hook output priority 0; policy accept;

        # Allow established outbound connections
        ct state established,related accept

        # Rate limit outbound connections
        ct state new limit rate 100/minute accept

        # Log dropped packets
        limit rate 3/minute log prefix "NFTables-Output-DROP: "
        drop
    }

    chain forward {
        type filter hook forward priority 0; policy drop;
    }
}

# Enable the ruleset
add table inet filter

